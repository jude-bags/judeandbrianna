# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type RSVP @model @auth(rules: [
  { allow: public, operations: [create] },         # anyone can submit
  { allow: private, provider: userPools },         # signed-in users can query, update, delete
  { allow: groups, groups: ["Admin"] }             # restrict management to Admin group
]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  attending: String!
  bringingGuest: String
  guestFirstName: String
  guestLastName: String
  foodRestrictions: String
  group: String
  needsHotelRoom: String
  numberOfRooms: String
  timestamp: AWSDateTime
}


input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRSVPConnection {
  items: [RSVP]!
  nextToken: String
}

input ModelRSVPFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  attending: ModelStringInput
  bringingGuest: ModelStringInput
  guestFirstName: ModelStringInput
  guestLastName: ModelStringInput
  foodRestrictions: ModelStringInput
  group: ModelStringInput
  needsHotelRoom: ModelStringInput
  numberOfRooms: ModelStringInput
  timestamp: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRSVPFilterInput]
  or: [ModelRSVPFilterInput]
  not: ModelRSVPFilterInput
}

type Query {
  getRSVP(id: ID!): RSVP
  listRSVPS(filter: ModelRSVPFilterInput, limit: Int, nextToken: String): ModelRSVPConnection
}

input ModelRSVPConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  email: ModelStringInput
  attending: ModelStringInput
  bringingGuest: ModelStringInput
  guestFirstName: ModelStringInput
  guestLastName: ModelStringInput
  foodRestrictions: ModelStringInput
  group: ModelStringInput
  needsHotelRoom: ModelStringInput
  numberOfRooms: ModelStringInput
  timestamp: ModelStringInput
  and: [ModelRSVPConditionInput]
  or: [ModelRSVPConditionInput]
  not: ModelRSVPConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateRSVPInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  attending: String!
  bringingGuest: String
  guestFirstName: String
  guestLastName: String
  foodRestrictions: String
  group: String
  needsHotelRoom: String
  numberOfRooms: String
  timestamp: AWSDateTime
}

input UpdateRSVPInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  attending: String
  bringingGuest: String
  guestFirstName: String
  guestLastName: String
  foodRestrictions: String
  group: String
  needsHotelRoom: String
  numberOfRooms: String
  timestamp: AWSDateTime
}

input DeleteRSVPInput {
  id: ID!
}

type Mutation {
  createRSVP(input: CreateRSVPInput!, condition: ModelRSVPConditionInput): RSVP
  updateRSVP(input: UpdateRSVPInput!, condition: ModelRSVPConditionInput): RSVP
  deleteRSVP(input: DeleteRSVPInput!, condition: ModelRSVPConditionInput): RSVP
}

input ModelSubscriptionRSVPFilterInput {
  id: ModelSubscriptionIDInput
  firstName: ModelSubscriptionStringInput
  lastName: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  attending: ModelSubscriptionStringInput
  bringingGuest: ModelSubscriptionStringInput
  guestFirstName: ModelSubscriptionStringInput
  guestLastName: ModelSubscriptionStringInput
  foodRestrictions: ModelSubscriptionStringInput
  group: ModelSubscriptionStringInput
  needsHotelRoom: ModelSubscriptionStringInput
  numberOfRooms: ModelSubscriptionStringInput
  timestamp: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionRSVPFilterInput]
  or: [ModelSubscriptionRSVPFilterInput]
}

type Subscription {
  onCreateRSVP(filter: ModelSubscriptionRSVPFilterInput): RSVP @aws_subscribe(mutations: ["createRSVP"])
  onUpdateRSVP(filter: ModelSubscriptionRSVPFilterInput): RSVP @aws_subscribe(mutations: ["updateRSVP"])
  onDeleteRSVP(filter: ModelSubscriptionRSVPFilterInput): RSVP @aws_subscribe(mutations: ["deleteRSVP"])
}

